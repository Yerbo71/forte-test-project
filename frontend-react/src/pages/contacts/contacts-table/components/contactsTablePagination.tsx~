import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import {
  IconChevronLeft,
  IconChevronRight,
  IconChevronsLeft,
  IconChevronsRight
} from '@tabler/icons-react';
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectItem,
  SelectValue
} from '@/components/ui/select';
import { Label } from '@/components/ui/label';

interface PaginationProps {
  pageIndex: number;
  pageCount: number;
  pageSize: number;
  onPageChange: (page: number) => void;
  onPageSizeChange: (size: number) => void;
}

export function ContactsTablePagination({
  pageIndex,
  pageCount,
  pageSize,
  onPageChange,
  onPageSizeChange
}: PaginationProps) {
  // Локальный стейт для отображения выбранного pageSize
  const [localPageSize, setLocalPageSize] = useState(pageSize);

  // Обновляем локальный стейт, если проп pageSize изменился извне
  useEffect(() => {
    setLocalPageSize(pageSize);
  }, [pageSize]);

  const handlePageSizeChange = (value: string) => {
    const newSize = Number(value);
    setLocalPageSize(newSize);
    onPageSizeChange(newSize);
  };

  return (
    <div className="flex items-center justify-between p-4">
      <div className="hidden items-center gap-2 sm:flex">
        <Label htmlFor="rows-per-page" className="text-sm font-medium">
          Rows per page:
        </Label>
        <Select value={String(localPageSize)} onValueChange={handlePageSizeChange}>
          <SelectTrigger size="sm" className="w-20" id="rows-per-page">
            <SelectValue />
          </SelectTrigger>
          <SelectContent side="top">
            {[10, 20, 30, 40, 50].map((size) => (
              <SelectItem key={size} value={String(size)}>
                {size}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      <div className="flex items-center gap-2">
        <Button
          variant="outline"
          size="sm"
          onClick={() => onPageChange(0)}
          disabled={pageIndex === 0}
          aria-label="Go to first page"
        >
          <IconChevronsLeft />
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => onPageChange(pageIndex - 1)}
          disabled={pageIndex === 0}
          aria-label="Go to previous page"
        >
          <IconChevronLeft />
        </Button>

        <span className="px-4 text-sm font-medium">
          Page {pageIndex + 1} of {pageCount}
        </span>

        <Button
          variant="outline"
          size="sm"
          onClick={() => onPageChange(pageIndex + 1)}
          disabled={pageIndex >= pageCount - 1}
          aria-label="Go to next page"
        >
          <IconChevronRight />
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => onPageChange(pageCount - 1)}
          disabled={pageIndex >= pageCount - 1}
          aria-label="Go to last page"
        >
          <IconChevronsRight />
        </Button>
      </div>
    </div>
  );
}
