import { ColumnDef } from '@tanstack/react-table';
import { z } from 'zod';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from '@/components/ui/dropdown-menu';
import { IconDotsVertical } from '@tabler/icons-react';
import { useNavigate } from 'react-router-dom';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { deleteContact } from '@/api';

export const schema = z.object({
  id: z.number(),
  name: z.string(),
  phone: z.string(),
  email: z.string()
});

export type Contact = z.infer<typeof schema>;

export const contactsTableColumns = (): ColumnDef<Contact>[] => {
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  const deleteMutation = useMutation({
    mutationFn: deleteContact,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['contacts'] });
    }
  });

  return [
    {
      accessorKey: 'id',
      header: 'ID',
      cell: ({ getValue }) => <div className="text-start">{getValue<number>()}</div>
    },
    {
      accessorKey: 'name',
      header: 'Name',
      cell: ({ getValue }) => (
        <div className="flex items-center justify-start gap-2">
          <Badge variant="outline" className="text-muted-foreground px-1.5">
            {getValue<string>()}
          </Badge>
        </div>
      )
    },
    {
      accessorKey: 'phone',
      header: 'Phone',
      cell: ({ getValue }) => (
        <div className="flex items-center justify-start gap-2">
          <Badge variant="outline" className="text-muted-foreground px-1.5">
            {getValue<string>()}
          </Badge>
        </div>
      )
    },
    {
      accessorKey: 'email',
      header: 'Email',
      cell: ({ getValue }) => (
        <div className="flex items-center justify-start gap-2">
          <Badge variant="outline" className="text-muted-foreground px-1.5">
            {getValue<string>() || 'N/A'}
          </Badge>
        </div>
      )
    },
    {
      id: 'actions',
      header: '',
      cell: ({ row }) => {
        const id = row.original.id;
        return (
          <div className="flex items-center justify-end gap-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon" className="text-muted-foreground">
                  <IconDotsVertical />
                  <span className="sr-only">Open menu</span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-32">
                <DropdownMenuItem onClick={() => navigate(`/contact-form/${row.original.id}`)}>
                  Edit
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  className="text-destructive"
                  onClick={() => alert(`Delete item ${id}`)}
                >
                  Delete
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        );
      }
    }
  ];
};
